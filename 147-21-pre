library(DESeq2)
library(tidyverse)

# Read the sample information into a data frame
sampleinfo <- read.delim("samplesM21.txt", stringsAsFactors=F)
sampleinfo

# Read the data into R
cts6 <- read.table("counts/all.tsv006", row.names=1, header=T)
cts7 <- read.table("counts/all.tsv007", row.names=1, header=T)
seqdata <- cts6 +cts7
seqdata<- seqdata[,c(1:7,9:13,15,16,18:24)]  # remove 21 16 24
head(seqdata)

dim(seqdata)
keep <- rowSums(seqdata) > 10
countdata <- seqdata[keep,]
dim(countdata)
countdata <- as.matrix(countdata)

librarySizes <- colSums(countdata)
barplot(librarySizes, 
        names=names(librarySizes), 
        las=2, 
        main="Barplot of library sizes")
abline(h=20e6, lty=2)


# Get log2 counts per million
logcounts <- log2(countdata + 1)

# make a colour vector
tissueCol <- as.numeric(factor(sampleinfo$tissue)) + 1
# Check distributions of samples using boxplots
boxplot(logcounts, 
        xlab="", 
        ylab="Log2(Counts)",
        las=2,
        col=tissueCol)
# Let's add a blue horizontal line that corresponds to the median logCPM
abline(h=median(as.matrix(logcounts)), col="blue")



library(ggfortify)
rlogcounts <- rlog(countdata)
save(countdata, rlogcounts, sampleinfo, file="results/preprocessing.RData")


load ("results/preprocessing.RData")
# run PCA
pcDat <- prcomp(t(rlogcounts))
# plot PCA
library(ggfortify)

par(mfrow=c(2,2))
autoplot(pcDat)

# We can use colour and shape to identify the Cell Type and the Status of each ample
autoplot(pcDat,
         data = sampleinfo, 
         colour="condition", 
         shape="tissue",
         size=5)
         
# Specify some clearer shapes to use that have a black outline and use fill
autoplot(pcDat,
         data = sampleinfo, 
         fill="condition", 
         shape="tissue",
         size=5) +
    scale_shape_manual(values=c(21, 24)) +
    guides(fill = guide_legend(override.aes=list(shape=22)))
     
autoplot(pcDat,
         data = sampleinfo, 
         colour="tissue", 
         shape=FALSE,
         label.size=6)

# We estimate the variance for each row in the logcounts matrix
countVar <- apply(rlogcounts, 1, var)
# Get the row numbers for the top 500 most variable genes
highVar <- order(countVar, decreasing=TRUE)[1:500]
# Subset logcounts matrix
hmDat <- rlogcounts[highVar,]


library(gplots)
library(RColorBrewer)
# Get some nicer colours
mypalette <- brewer.pal(11, "RdYlBu")
# http://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3
morecols <- colorRampPalette(mypalette)
# Set up colour vector for celltype variable
col.sample <- c("purple","orange")[sampleinfo$condition]
# Plot the heatmap

condition_color <- unlist( lapply(sampleinfo$condition, function(x){  
                  if (grepl("Resistant", x)) "purple"     
                  else if (grepl("Sensitive", x)) "orange"
                  }))

pdf("21Htest.pdf",width=7,height=5)
heatmap.2(hmDat, 
          col=rev(morecols(50)),
          trace="column", 
          main="Top 500 most variable genes across samples",
          ColSideColors=condition_color,
          scale="row")
dev.off()


tissue_color <- unlist( lapply(sampleinfo$tissue, function(x){  
                  if (grepl("LN", x)) "red"     
                  else if (grepl("PB", x)) "green"
                  else if (grepl("PE", x)) "yellow"
 
 }))       
 myCols <- cbind(condition_color,tissue_color )
 colnames(myCols)[1] <- "Condtion"
 colnames(myCols)[2] <- "Tissue"
 
 #install.packages("heatmap.plus")
 library("heatmap.plus")
 
 pdf("21Htest.plus.pdf",width=7,height=5)
 heatmap.plus(hmDat, 
          col=rev(morecols(50)),
          trace="column", 
          main="Top 500 most variable genes across samples",
          ColSideColors=myCols,
          scale="row")
dev.off()



#####################################################################


### DESeq2
# first lets check that our rows and columns match
all(sampleinfo$Sample == colnames(countdata))

# create the design formula
design <- as.formula(~ tissue)
# create the DESeqDataSet object
ddsObj <- DESeqDataSetFromMatrix(countData = countdata,
                              colData = sampleinfo,
                              design = design)
                              
                              
# Apply normalisation to DDS object
ddsObj <- estimateSizeFactors(ddsObj)
sizeFactors(ddsObj)

library(limma)
logcounts <- log2(countdata + 1)
par(mfrow=c(1,2))
plotMA(logcounts, array = 7)
abline(h=0,col="grey")
plotMA(logcounts, array = 11)
abline(h=0,col="grey")


normalizedCounts <- counts(ddsObj, normalized=TRUE) 
logNormalizedCounts <- log2(normalizedCounts + 1)
par(mfrow=c(1,2))
plotMA(logNormalizedCounts, array = 7)
abline(h=0,col="grey")
plotMA(logNormalizedCounts, array = 11)
abline(h=0,col="grey")

save(countdata, sampleinfo, file="results/preprocessing.RData")
